blueprint:
#################################################################
#                         INPUTS                                #
#################################################################
  name: Doorbell via vibration + motion v2
  description: Detects a physical doorbell ring using a vibration sensor with motion sensor confirmation to prevent false triggers. Can flash a light and/or send a notification when the doorbell is activated.
  domain: automation
  input:
    vibration_sensor:
      name: Vibration sensor
      description: Physical vibration sensor attached directly to the mechanical doorbell mechanism to detect actual bell movement
      selector:
        entity:
          filter:
            - domain: binary_sensor
              device_class:
                - vibration
    motion_sensor:
      name: Front door motion sensor
      description: Motion or occupancy sensor positioned at the front door entrance to confirm visitor presence and reduce false detections
      selector:
        entity:
          filter:
            - domain: binary_sensor
              device_class:
                - motion
                - occupancy
    notify_device:
      name: Notification device (optional)
      description: Mobile device to receive push notifications when the doorbell is detected (leave empty to disable notifications)
      default: ""
      selector:
        device:
          filter:
            - integration: mobile_app
    light_button:
      name: Light identify button (optional)
      description: Button entity that triggers a light to flash/identify when pressed - typically created automatically when adding Zigbee/Z-Wave lights (leave empty to disable light indication)
      default: ""
      selector:
        entity:
          filter:
            - domain: button

mode: single

#################################################################
#                         TRIGGERS                              #
#################################################################
trigger:
  - alias: Vibration detected
    platform: state
    entity_id: !input vibration_sensor
    to: "on"
  - alias: Motion detected at front door
    platform: state
    entity_id: !input motion_sensor
    to: "on"

variables:
  v_vibration_entity: !input vibration_sensor
  v_motion_entity: !input motion_sensor
  v_light_identify_button: !input light_button
  v_notify_device: !input notify_device
  v_notify_title: Doorbell
  v_lookback_sec: 15
  v_cooldown_sec: 10
  v_motion_now: "{{ is_state(v_motion_entity, 'on') }}"
  v_vibration_now: "{{ is_state(v_vibration_entity, 'on') }}"
  v_motion_last_changed: >
    {% set lst = expand(v_motion_entity) %}
    {{ (lst[0].last_changed if lst|length>0 else now()) }}
  v_vibration_last_changed: >
    {% set lst = expand(v_vibration_entity) %}
    {{ (lst[0].last_changed if lst|length>0 else now()) }}
  v_motion_recent: >
    {{ v_motion_now or (as_timestamp(now()) - as_timestamp(v_motion_last_changed) <= v_lookback_sec) }}
  v_vibration_recent: >
    {{ v_vibration_now or (as_timestamp(now()) - as_timestamp(v_vibration_last_changed) <= v_lookback_sec) }}
  v_and_gate: "{{ v_motion_recent and v_vibration_recent }}"
  v_ok_cooldown: >
    {% set last = state_attr(this.entity_id, 'last_triggered') %}
    {{ last is none or (as_timestamp(now()) - as_timestamp(last)) >= v_cooldown_sec }}
  v_message: >
    Doorbell rang at {{ now().timestamp() | timestamp_custom('%Y-%m-%d %H:%M:%S') }}
  v_has_light_button: "{{ (v_light_identify_button | string) | length > 0 }}"
  v_has_notify_device: "{{ (v_notify_device | string) | length > 0 }}"

condition:
  - alias: Both signals within lookback window
    condition: template
    value_template: "{{ v_and_gate }}"
  - alias: Cooldown
    condition: template
    value_template: "{{ v_ok_cooldown }}"

action:
  - alias: Blink light if a button was selected
    choose:
      - conditions:
          - condition: template
            value_template: "{{ v_has_light_button }}"
        sequence:
          - alias: Press identify button
            service: button.press
            target:
              entity_id: !input light_button

  - alias: Send push notification if a phone was selected
    choose:
      - conditions:
          - condition: template
            value_template: "{{ v_has_notify_device }}"
        sequence:
          - alias: Notify via mobile app
            device_id: !input notify_device
            domain: mobile_app
            type: notify
            title: "{{ v_notify_title }}"
            message: "{{ v_message }}"
